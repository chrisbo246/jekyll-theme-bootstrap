// Card front face style
.card {

  .progress {
    height: 3px;
  }

  &::before {
    font-size: 16rem;
    opacity: .25;
  }

  &.bg-success::before {
    //content:'\e033'; // iconic
    //content: "\f00c"; // font-awesome
    content: url('data:image/svg+xml;charset=UTF-8,%3csvg xmlns="http://www.w3.org/2000/svg" height="8rem" viewBox="0 0 512 512"%3e%3cpath d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/%3e%3c/svg%3e');
  }

  &.front-face {
    display: flex;

    &::before {
      //content:'\e0b0'; // iconic
      //font-family: 'Icons';
      //content: "\f128"; // font-awesome
      //font-family: FontAwesome;
      //font-family: 'Font Awesome 5 Free';
      //font-style: normal;
      //font-weight: normal;
      //text-decoration: inherit;
      //font-size: 8rem;
      //background-size: 8rem 8rem;
      //z-index: 0;
      align-items: center;
      display: flex;
      height: 100%;
      justify-content: center;
      left: 0;
      opacity: .05;
      overflow: hidden;
      position: absolute;
      top: 0;
      width: 100%;
    }
  }
}

.card-img {
  min-height: 100%;
  min-width: 100%;

  &.card-img-grayscale {
    filter: saturate(0%);
    //filter: url("filters.svg#custom-grayscale");
  }

  &.card-img-faded {
    opacity: .15;

    //&.lazyloaded,
    //&.lazyloading {
    //}
  }
}

.card-img-overlay,
.card-body {
  word-break: break-word;
  word-wrap: break-word;
}

.card-img-overlay ~ .card-header {
  background-color: transparent;
  border-bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 1;
}

.card-img-overlay ~ .card-footer {
  background-color: transparent;
  border-top: 0;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  z-index: 1;
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $size, $length in $spacers {
      .card-columns,
      .card-deck {
        &.gap-#{$size} {
          column-gap: $length;
          line-height: $length;

          > .card {
            margin-bottom: $length;
          }

          @if $size == 0 {
            .card {
              border-radius: 0;
            }
          }
        }
      }
    }
  }
}
